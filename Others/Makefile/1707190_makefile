1707190
3.7静态模式
静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活。我们还是来看一下语法：
<targets..>:<target-pattern>:<prereq-patterns>
	<commands>
...
targets定义了一系列的目标文件，可以右通配符。是目标的一个集合。
targets-pattern指明了targets的模式，也就是目标集模式。
prereq-patterns是目标的以来模式，它对targets-pattern形成的模式再进行一次依赖目标的定义
这样描述这三个东西，举个例子。如果我们的<target-pattern>定义成“%.o”,意思是我们集合中都是以“.o”结尾的，二如果我们的<prereq-patterns>定义成“%.c”，意思是对<target-patterns>所形成的目标进行二次定义，其计算方法是，取<target-patterns>模式中的"%"(也就是去掉了[.o]这个结尾)，并为其加上[.c]这个结尾，形成的新集合。
所以我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符，如果你的文件名中有“%”，那么你可以使用反斜杠“\”进行转义，来标识真实的“%”字符
看一个例子
objects=foo.o bar.o
all:$(objects)
$(objects):%.o:%.c
	$(CC)-c $(CFLAGS) $<-o $@
上面的例子中，指明了我们的目标从$object中获取，"%.o"表明要所有以".o"结尾的目标，也就是“foo.o bar.o”，也就是变量$objects集合的模式，而依赖模式“%.c”则取模式"%.o"的"%",也就是"foobar"，并为其加上".c"的后缀，于是，我们的依赖目标就是"foo.cbar.c".而命令中“$<”和"$@"则是自动化变量，"$<"表示所有的依赖目标集（也就是"foo.c bar.c"）,"$@"表示目标集（也就是foo.o bar.o）。于是，上面的规则展开后等价与下面的规则：
foo.o:foo.c
	$(CC)-c$(CFLAGS)foo.c -o foo.o
bar.o:bar.c
	$(CC)-c $(CFLAGS)bar.c -o bar.o
试想，如果我们的"%.o"有几百个，那么我们只要用这种很简单的“静态模式规则”就可以写完一堆规则，实在太有效率了。
files=foo.elc bar.o lose.o
$(filter %.o,$(files)):%.o:%.c
	$(CC)-c $(CFLAGS)$<-o $@
$(filter %elc,$(files)):%.elc:%.el
	emacs -f batch-byte-compile $<
$(filter.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。
170720
3.8自动生成依赖性
在Makefile中，我们的依赖关系可能会需要包含一系列的头文件，比如，如果我们的main.c中由一句"#include""defs.h",那么我们的依赖关系是
main:main.c defs.h
但是，如果是一个笔记哦啊大型的工程，逆必须清楚哪些C文件包含了哪些头文件，并且，你在加入或删除头文件时，压入需要小心地修改Makefile，这是一个很没有维护性的工作，为了避免这种繁重而又容易出错的事情，我们可以使用C/C++编译的一个功能。大多数C/C++编译器都支持一个"-M"的选项，即自动找寻源文件包含头文件，并生成一个依赖关系，例如，如果我们执行下面的命令：
cc -M main.c
其输出是main.o:main.c defs.h
于是由编译器自动生成的依赖关系，这样依赖，你就不必再手动书写若干文件的依赖关系，而由编译其自动生成了。需要提醒的是，如果你使用的GNU的C/C++编译器，你得用"-MM"参数，不然，"-M"参数会把一些标准库的头文件也包含进来
gcc-M main.c的输出是：

   main.o: main.c defs.h /usr/include/stdio.h /usr/include/features.h \

        /usr/include/sys/cdefs.h /usr/include/gnu/stubs.h \

        /usr/lib/gcc-lib/i486-suse-linux/2.95.3/include/stddef.h \

        /usr/include/bits/types.h /usr/include/bits/pthreadtypes.h \

        /usr/include/bits/sched.h /usr/include/libio.h \

        /usr/include/_G_config.h /usr/include/wchar.h \

        /usr/include/bits/wchar.h /usr/include/gconv.h \

        /usr/lib/gcc-lib/i486-suse-linux/2.95.3/include/stdarg.h \

        /usr/include/bits/stdio_lim.h
gcc -MM main.c的输出则是
main.o:main.c defs.h
那么，编译器的这个功能如何与我们的Makefile联系在一起呢。因为这样一来，我们的Makefile也要根据这些源文件重新生成，让Makefile自己依赖于源文件？
那么，编译器的这个功能如何与我们的Makefile联系在一起呢。因为这样一来，我们的Makefile也要根据这些源文件重新生成，让Makefile自己依赖与源文件？这个功能并不现实，不过我们可以由其他手段来迂回地实现这一功能。GNU组织建议把编译器为每一个源文件的自动生成的依赖关系放到一个文件中，为每一个"name.c"的文件都生成一个"name.d"的Makefile文件，[.d]文件中就存放对应[.c]文件的依赖关系。
于是，我们可以写出[.c]文件和[.d]文件的依赖关系，并让make自动更新或自成[.d]文件，并把其包含在我们的主Makefile中，这样，我们就可以自动话地生成每个文件的依赖关系了。
这里我们给出了一个模式规则来产生[.d]文件
   %.d: %.c

           @set -e; rm -f $@; \

            $(CC) -M $(CPPFLAGS) $< > $@.
; \

            sed 's,$∗\.o[ :]*,\1.o $@ : ,g' < $@.
> $@; \

            rm -f $@.
这个规则的意思是，所有的[.d]文件依赖与[.c]文件，"rm -f $@"的意思是删除
所有的目标，也就是[.d]文件，第二行的意思是为每个依赖文件"$<",也就是[.c]文件生成依赖文件，"$@"表示模式"%.d"完那间，如果由一个C文件是name.c,那么"%"就是"name"""意为一个随机编号，第二行生成的文件有可能是"name.d.12345"，第三行使用sed命令做了一个替换,关于ed命令的用法请参看相关的使用文档，第四行就是删除临时文件。
总而研制，这个模式要做的事就是在编译器生成的依赖关系中加入[.d]文件的依赖，即把依赖关系：
main.o:main.c defs.h
转成
main.o main.d:main.c defs.h
于是我们的[.d]文件也会自动更新了，并会自动生成了，当然，你还可以在这个[.d]文件中加入的不只是依赖关系，包括生成的命令也可一并加入，让每个[.d]文件都包含一个完赖的规则则。一旦我们完成这个工作，接下来，我们就要把这些自动生成的规则放进我们的主Makefile中。我们可以使用Makefile"inclde"命令，来引如别的Makefile，例如：
sourecs=foo.c bar.c
include $(soucres:.c=.d)
上述语句中"$(sources:.c=.d)"中的".c=.d"的意思是做一个题啊换，把变量$(sources)所有的[.c]的字串都替换成[.d],关于这个“替换”的内容。淡然，你得注意次序，因为include是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标。
