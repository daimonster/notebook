一般来说，无论是C、C++、还是pas，首先要把源文件编译成中间代码文件，在windows下也就是.obj文件,UNIX下是.o文件,即Object File文件，这个动作叫做编译，然后把大量的object file合成执行文件。这个动作叫做链接
编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是逆需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该方在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件。
链接时，主要是链接函数和全局变量，所以我们可以使用这些中间木便文件（O或者OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件，在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打包，在win下这种包叫库文件，也就是.lib文件，在UNIXxia也就是.a文件
总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法和函数、变量是否被声明。如果函数未被声明，编译器就会给出一个警告，但可以生成OBJ file。而在链接程序是，链接器会在所有的OBJ file中找寻函数的实现，如果找不到，那就会报连接错误码。
target... : prerequisites ...

          command
target也就是一个目标文件，可以是OBJ file，也可以是执行文件。还可以是一个标签
prerequisites就是，要生成taget所需要的文件或是目标
command也就是make需要执行的命令（任意的shell命令）
这是一个文件的一览关系，也就是说，target着一个或多个目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说,prerequisitesd中如果由一个以上的文件比target文件要新的话，command锁定以的命令就会被执行。这就是makefile的规则。也就是makefile中最核心的内容。
 edit : main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
           cc -o edit main.o kbd.o command.o display.o \
                      insert.o search.o files.o utils.o
   main.o : main.c defs.h
           cc -c main.c
   kbd.o : kbd.c defs.h command.h
           cc -c kbd.c
   command.o : command.c defs.h command.h
           cc -c command.c
   display.o : display.c defs.h buffer.h
           cc -c display.c
   insert.o : insert.c defs.h buffer.h
           cc -c insert.c
   search.o : search.c defs.h buffer.h
           cc -c search.c
   files.o : files.c defs.h buffer.h command.h
           cc -c files.c
   utils.o : utils.c defs.h
           cc -c utils.c
   clean :
           rm edit main.o kbd.o command.o display.o \
              insert.o search.o files.o utils.o
反斜杠是换行符的意思。这样比较便于makefile的易读，我们可以把这个内容保存在文件为makefile或Makefile文件中,然后在该目录下直接输入命令make就可以生成文件edit.如果要删除执行文件和所有的中间目标文件，那么只要简单地执行以下“make clean”就可以了。
在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件就是冒号文件后面的那些.c和.h文件。每一个.o文件都有一组依赖文件，而这些.o文件又是执行文件edit的依赖文件。依赖关系的实质就是说了目标文件是由那些文件生成的，换言之，目标文件是那些文件更新的。
这里要说明的一点是，clean不是一个文件，它只不过是一个动作名字，有点像C中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也不会自动执行其后所定义的命令，要执行其后的命令，就要在make命令后明显地指出这个lable的名字。这种方法非常游泳，我们可以在makefile中定义不用的编译或是编译无关的命令，比如程序的打包，程序的备份，等等。
1.3make是如何工作的
在默认的方式下，也就是我们只输入make命令「
1make会在当前目录下找名字叫makefile或Makefile的文件
2如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到edit这个文件，并把这个文件作为最终的目标文件。
3如果edit文件不存在，或是edit所依赖的后面的.o文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。
4如果edit所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则在根据那一个规则生成.o文件
5当然，你的C和H文件是存在的，于是make会生成.o文件，然后再用.o文件声明make的终极任务，也就是执行文件edit了
这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后的依赖文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性，即，如果在我找了依赖关系之后，冒后后面的文件还是不再，那么对不起，我就不工作了。
通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或简介关联，那么它后面所定义的命令不会不会被自动执行，不过，我们可以显式要make执行。即命令“make clean”，一次来清除所有的目标文件，以便重编译。
于是在我们编程中，如果这个工程已经被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们依赖性，我们的目标file.o会被重新编译（也就是在这个依赖性关系后面所定义的命令），于是file.o文件也是罪行的啦，于是file.o的文件修改时间比edit要新，所以edit也会被重新链接了
如果我们改变了command.h那么kdb.o，command.o和files.o都会被重编译，并且,edit会被重链接。
在makefile中使用变量
在上面的例子中让我们先看edit的规则
edit : main.o kbd.o command.o display.o \
	insert.o search.o files.o utils.o
    cc -o edit main.o kbd.o command.o display.o \
	insert.o search.o files.o utils.o
我们可以看到.o文件的字符串被重复了两次，如果我们的工程要加入新的.o文件，那么我们需要在两个地方加（应该是三个地方加，还有agiel地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，，但如果makefile变得复杂，那么我们就可能会网点一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们可以使用变量，makefile的变革两也就是一个字符串，理解成C中的宏可能会更好
比如我们声明一个变量，叫bojects,OBJ,obj等等，只要能够表示obj文件。我们在nakefile一开始就这样定义
    objects = main.o kbd.o command.o display.o \

             insert.o search.o files.o utils.o
于是我们就可以很方便地在我们的makefile中以“$(objects)”的方式来使用这个变量了，于是我们的改良版makefile文件就变成了下面这个样子
objects = main.o kbd.o command.o display.o \
             insert.osearch.o files.o utils.o 
   edit : $(objects)
           cc -o edit $(objects)
   main.o : main.c defs.h
           cc -c main.c
   kbd.o : kbd.c defs.h command.h
           cc -c kbd.c
   command.o : command.c defs.h command.h
           cc -c command.c
   display.o : display.c defs.h buffer.h
           cc -c display.c
   insert.o : insert.c defs.h buffer.h
           cc -c insert.c
   search.o : search.c defs.h buffer.h
           cc -c search.c
   files.o : files.c defs.h buffer.h command.h
           cc -c files.c
   utils.o : utils.c defs.h
           cc -c utils.c
   clean :
           rm edit $(objects)
于是如果由新的.o文件加入,我们只需简单第修改一下objects便来嗯就可以了
1.5让make自动推到
make很强大，它可以自动推到文件以及文件依赖关系后面的命令，于是我们就每必要在每一个.o文件后都写上类似的命令，因为make可以自动识别，并自己推导命令。
只要make看到一个.o文件，它就会自动地把.c文件加载依赖关系中，如果make找到一个whatever.o 那么whatever.c的依赖文件。并且cc -whatever.c也会被推到出来，于是，我们的makefile也不用写得这么复杂。
objects = main.o kbd.o command.o display.o \
             insert.o search.o files.o utils.o
 
   edit : $(objects)
           cc -o edit $(objects)
 
   main.o : defs.h
   kbd.o : defs.h command.h
   command.o : defs.h command.h
   display.o : defs.h buffer.h
   insert.o : defs.h buffer.h
   search.o : defs.h buffer.h
   files.o : defs.h buffer.h command.h
   utils.o : defs.h
 
   .PHONY : clean
   clean :
           rm edit $(objects)
“.PHONY”表示，clean是个伪目标文件
1.6另类风格的makefile 
既然我们的make可以自动推到命令，那么我看到那堆.h和.o的依赖就有点不爽，那么多重复的.h，能不能把其收拢起来。因此，可以看见其改进。
  objects = main.o kbd.o command.o display.o \
             insert.o search.o files.o utils.o
 
   edit : $(objects)
           cc -o edit $(objects)
 
   $(objects) : defs.h
   kbd.o command.o files.o : command.h
   display.o insert.o search.o files.o : buffer.h
 
   .PHONY : clean
   clean :
           rm edit $(objects)
缺点在于文件的依赖关系看不清楚，如果文件一多，要加入几个新的.o文件，容易高乱
1.7清空目标文件的规则
每个makefile都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁。一般的做法是
clean:

           rm edit $(objects)
更为稳健的做法是：
.PHONY : clean

       clean :

               -rm edit $(objects)
前面说过
.PHONY的意思便是clean是一个“伪目标”。而在rm命令前面加了一个小减号的意思就是哦，也许某个文件出现问题。但不要管，继续做后面的事情，一个默认的规则就是“clean从来都是放在文件的最后”
2makefile总述
maleficent里面有什么
1,显式规则。显式规则说明了，如何生成一个或多的目标文件。这是由Makefile书写这明显指出，要生成的文件，文件的依赖文件，生成的命令。
2隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地间略书写Makefile，这是由make所支持的。
3变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点像C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的应用位置上。
4文件指示，其中包含了三个部分，一个是在一个makefile中引用另一个makefile，就像C语言中的include一样，另一个是根据某些情况执行malefile中的有效部分，就像C语言中的预编译#if一样bayou就是定义一个多行的命令
5注释，makefile中只有行注释，和UNIX的shell脚本一样，其注释是用#字符
最后值得一提的是在makefile中的命令，必须要以TAP键开始
2makefile的文件名
默认的情况下，make命令会在当前目录下按顺序找寻的文件名为GNUmakefile makefile Makefile的文件，找到了解释这个文件。在这三个文件名中，最好使用Makefile这个文件名，因为，这个文件名第一个字符为大写，这样由一种显目的感觉。最好不要用GNUmakefile这个文件是GNU的make识别的。另外由一些马克支队全小写的makefile文件名敏感，但是基本上来说大多数马克都支持makefile和Make file 这两种默认文件名
如果要指定特定的makefile你可以使用make的-f和--file参数
2.3引用其他的makefile
在Makefile使用include关键字可以把别的Makefile包含进来，这很像C语言的#include，被办含的文件会原模原样的放在当前文件的包含位置。include的语法是：
#include<filename>filename可以是当前系统操作系统shell的文件模式（可以包含路径和通配符）
在include前面可以由一些空字符，但是决不能是tab键开始。include和可以用一个或多个空格隔开。举个例子，你有这样几个Makefile:a.mk b.mk c.mk 还有一个文件叫foo.make，以及一个变量$(bar)，其包行了e.mk和f.mk，那么，那面的语句
include foo.make *.mk $(bar)
等价于
include foo.make a.mk b.mk c.mk e.mk f.mk
make命令开始时，会把找寻include所指出的其他makefile，并把其内容安置在当前的位置。就好像C/C++中的#include指令一样，如果文件都没有指定绝对路径或是相对路径的话，make会在当前目录下首先寻找，如果当前目录下没有找到，那么，make还会在下面的几个目录下找
1.如果make执行，有“-I”或“--include-dir”参数，那么make就会在这个参数所指定的目录下去寻找。
2如果目录是/include(一般是：/usr/local或/usr/include)存在的话，make也会去找
如果由文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误，它会继续载入其它的文件，一旦完成makefile的父去，make会再重试这些没有找到，或是不能读取的文件，如果还是不行，make才会出现一条指明信息。如果逆想让make不理那些无法读取的文件，继续执行，你可以在include前加一个减号“-”
如-include<filename>其表示，无论include过程出现什么错误，都不要报错继续执行。
2.4环境变量MAKEFILES
如果你在当前的环境中定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似与include的动作。这个变量中的值是其他的Makefile，用空格分隔。只是，它和include不同的是，从这个环境变量中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现错误，make也会不理
2.5make的工作方式
GNU的make工作的执行步骤如下：
1读入所有的Makefile
2读入被include的其它Makefile
3初始化文件中的变量
4推到隐晦规则，并分析所有规则
5为所有的目标文件创建依赖关系链
6根据依赖关系，决定那些目标要重新生成
7执行生成命令
3makefle书写规则
规则包含两个部分，一个是依赖关系，一个是生成目标的方法。
在Makefile中，规则的顺序是很重要的，因为，Makefile中只应该有一个最终目标，其他的目标都是被这个目标所连带出来的，所以一定要让make直到逆的最终目标是什么。一般来说定义在Makefile中的目标可能会有很多，但是第一条规则中的目标将被确立为最终的目标。如果第一条规则中的目标由很多个，第一个目标会称为最终的目标。make所完成的也是这个目标
3.1规则举例
foo.o:foo.c defs.h
	cc -c -g foo.c
foo.o是我们的目标，foo.c和defs.h是目标所依赖的源文件，而只有一个名利“cc -c -c foo.c”(以Tab键开头)。这个规则告诉我们两件事
1文件依赖关系，foo.o依赖于foo.c和defs.h的文件，如果foo.c和defs.h的文件日期要比foo.o文件日期要新，或是foo.o不存在，那么依赖关系发生
2如果生成（或更新）foo.o文件，也就是那个cc命令，其说明了，如何生成foo.o这个文件
3.3在规则中使用通配符
“～”波浪号（“～”)字符在文件名中也有比较特殊的用途。如果是“~/test”,这就表示
当前用户的$HOME目录下的test目录。而“`henchen/test”则biloxi用户hchen的宿主目录下的test目录。
“*”
3.4文件搜寻
在一些大的工程中，由大量的源文件，并存放在不同的目录中。所以，当make需要找寻文件的依赖关系时，你可以在文件前加上路径，但最好的方法是把一个路径告诉make，让make自动去找。
Makefile文件中的特殊变量“VPATH”就是完成这个功能的，如果没有指明这个变量，make只会在当前的目录中去找寻依赖文件和目标文件。如果定义了这个变量，那么make就会在当前目录找不到的情况下，到所执行的目录中去找寻文件了
VPATH=src:../headers
上面的指定指定两个目录，“src”和“../headers”，make会按炸这个顺序进行搜索。目录由“冒号”分隔（当然，当前目录永远是最高有限搜索的地方）
另一个设置文件搜索路径的方法是使用make的“vapth”关键字（小写），这不是变量，这是一个make的关键子，这和上面提到的那个VPATH变量很累死，但是它更为灵活。它可以指定不同的文件在不同的搜索目录中，这是一个很灵活的功能。它的使用方法有三种
1vpath<pattern><directorises> 为符合模式<pattern>的文件指定搜索目录<directories>
2vpath<patthern> 清除符合模式<pattern>的文件的搜索目录
3vpath 清除所有已被设置好了的文件搜索目录
vapth使用方法中的<pattern>需要包含“%”字符。“%”的意思是匹配零或若干个字符，例如“%.h”表示所有以“.h”结尾的文件。<pattern>制定了要搜索的文件集，而<directories>则制定了文件集的搜索的目录。例如
vpath %.h ../headers
该语句表示,要求make在"../headers"目录下搜索所有以“.h”结尾的文件(如果某文件在当前目录没有找到的话)
我们可以连续地是用vpath语句,以指定不同搜索策略。如果连续vpath语句中出现了相同的<pattern>，或是被重复了的<pattern>，那么，make会按照vpath语句的先后顺序来执行搜索
vpath %.c foo

   vpath %   blish

   vpath %.c bar
其表示.c结尾的文件，现在foo目录，然后是blish最后是bar目录
 vpath %.c foo:bar

   vpath %   blish
而上面的语句则表示.c结尾的文件，现在foomulu，然后是bar目录，最后才是blish目录
3.5伪目标
最早先的一个例子中，我们提到过一个“clean”的目标，这是一个“伪目标”，

   clean:

           rm *.o temp
正像我们前面例子中的“clean”一样，既然我们生成了许多文件编译文件。我们也应该提供一个清除它们的“目标”以备完整地重编译而用（以“make clean”来世用该目标）
因为，我们并不生成clean这个文件。伪目标并不是一个文件，只是一个标签，由于伪目标不是文件，所以make无法生成它的依赖关系和决定它是否要执行，我们只有显式地指明这个目标才能让其生效。当然，为目标的取名不能和文件名重名，不然就失去了伪目标的意义了
当然为了避免和文件名重名的这种情况，我们可以使用一个特殊的标记“.PHONY”来显式地指明一个目标是伪目标，向make说明，不管是否有这个文件，这个目标就是伪目标
.PHONY:clean
只要由这个声明，不管是否由clean文件,只要运行clean这个目标,只有make clean这样。于是整个过程可以这样写
.PHONY:clean
clean:
	rem *.o temp
伪目标一般没有依赖文件
伪目标同样可以作为“默认目标”，只要将其放在第一个，一个示例就是如果你的Makefile需要一口气生成若干个可执行文件，但你只想简单地敲一个make完事，并且，所有的目标文件都写在一个Makefile中，那么你可以使用伪目标这个特性
 all : prog1 prog2 prog3

   .PHONY : all

 

   prog1 : prog1.o utils.o

           cc -o prog1 prog1.o utils.o

 

   prog2 : prog2.o

           cc -o prog2 prog2.o

 

   prog3 : prog3.o sort.o utils.o

           cc -o prog3 prog3.o sort.o utils.o
我们知道，Makefile中的第一个目标会被作为其默认目标。我们声明了一个all的伪目标，其依赖于其他三个目标。由于伪目标的特性是总是被执行的，所以其依赖的那三个目标就总是不如all这个目标新。所以其他三个目标的规则总是会被决议。也就达到了我们一个口气生成多个目标的目的。>PHONY:all 声明了 all这个目标为伪目标
从上面的例子我们可以看出，目标也可以成为依赖。所以，伪目标同样也可以成为依赖
.PHONY:cleanall cleanobj cleandiff

cleanall:cleanobj cleandiff
	rm program
cleanobj:
	rm *.o
cleandiff
	rm *.diff
makeclean将清楚所有要被清除的文件，cleanobj和cleandiff这两个伪目标由点像子程序的意思。我们可以输入makecleanall和makecleanfiff命令来达到清除不同种类文件的目的
3.6多目标
Makefile的规则中的目标可以不止一个，其支持多目标，由可能我们的多个目标同时依赖于一个文件，并且其生成的命令大体类似。于是我饿每那就能把其合并起来。淡然，多个目标的生成规则的执行命令是同一个，这可能会给我们带来麻烦，不过好在我们可以使用一个自动化变量“$@”（自动化变量），这个变量表示着目前规则中所有的目标的集合，如下例：
   bigoutput littleoutput : text.g

           generate text.g -$(subst output,,$@) > $@
上述规则等价于：
bigoutput : text.g

           generate text.g -big > bigoutput

littleoutput : text.g

           generate text.g -little > littleoutput
	
